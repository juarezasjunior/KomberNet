@using System.Collections.ObjectModel;
@using System.Reactive.Subjects;
@using System.Reactive.Linq;
@using System.Collections.Specialized;
@using System.Reactive;

@inherits BodyBase

@implements IDisposable

@typeparam TSummariesQueryRequest
@typeparam TSummary

@{
    base.BuildRenderTree(__builder);
}

<RadzenCard>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm">
                <RadzenLabel Text="@this.Localizer["Search_InputText"]" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <RadzenTextBox Placeholder="@this.SearchPlaceholder" class="w-100" />
            </div>
            <div class="col-sm">
                <RadzenButton Text="@this.Localizer["Search_Button"]"
                              Click="@OnSearchCallback"
                              ButtonStyle="@Radzen.ButtonStyle.Secondary" />
            </div>
        </div>

        <br />
        <RadzenCard Visible="IsShowingMoreFilter">
            <div class="container-fluid">
                @FilterCriteriaArea
            </div>
        </RadzenCard>

        @if (this.IsShowingMoreFilter)
        {
            <br />
        }

        <div class="row justify-content-center">
            <div class="col-auto">
                <RadzenButton Icon="@FilterIcon"
                              Text="@this.FilterDescription"
                              Size="@Radzen.ButtonSize.Small"
                              Click="() => this.IsShowingMoreFilter = !this.IsShowingMoreFilter"
                              ButtonStyle="@Radzen.ButtonStyle.Secondary" />
            </div>
        </div>
    </div>
</RadzenCard>



<br />

<RadzenCard>
    <div class="container-fluid">
        <div class="row justify-content-end">
            <div class="col-auto">

                @{
                    var allActionButtons = this.ActionButtons.OrderBy(x => x.Sequence).ToList();
                    var firstThreeActionButtons = allActionButtons.Take(3);

                    foreach (var actionButton in firstThreeActionButtons)
                    {
                        <RadzenButton Text="@actionButton.Text"
                              Visible="@actionButton.IsVisible"
                              ButtonStyle="@Radzen.ButtonStyle.Primary"
                              Disabled="@(!actionButton.IsEnabled)"
                              Click="@actionButton.OnExecute" />
                    }

                    var moreActionButtons = allActionButtons.Skip(3);

                    if (moreActionButtons.Any())
                    {
                        <RadzenSplitButton Text="@this.Localizer["Button_MoreOptions"]" ButtonStyle="Radzen.ButtonStyle.Primary">

                            @foreach (var actionButton in moreActionButtons)
                            {
                                <RadzenSplitButtonItem Text="@actionButton.Text"
                                           Visible="@actionButton.IsVisible"
                                           onclick="@actionButton.OnExecute" />
                            }

                        </RadzenSplitButton>
                    }
                }
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <hr />
            </div>
        </div>

        <RadzenDataGrid Data="@Results" TItem="TSummary" SelectionMode="Radzen.DataGridSelectionMode.Multiple" @bind-Value="@InternalSelectedResults"
                        RowSelect="@OnRowSelect" RowDeselect="@OnRowDeselect">
            <Columns>
                @SearchColumnsArea
            </Columns>
        </RadzenDataGrid>
    </div>
</RadzenCard>

@code {
    private IDisposable selectedResultsObservable;
    private Subject<TSummary> summarySubject = new Subject<TSummary>();
    private IList<TSummary> InternalSelectedResults { get; set; } = new List<TSummary>();

    [Parameter]
    public string SearchPlaceholder { get; set; } = string.Empty;

    [Parameter]
    public bool ShouldSearchFirstHundredResults { get; set; } = true;

    [Parameter]
    public RenderFragment FilterCriteriaArea { get; set; }

    [Parameter]
    public IList<ActionButton> ActionButtons { get; set; } = new List<ActionButton>();

    [Parameter]
    public ObservableCollection<TSummary> Results { get; set; }

    [Parameter]
    public IList<TSummary> SelectedResults { get; set; }

    [Parameter]
    public EventCallback<IList<TSummary>> SelectedResultsChanged { get; set; }

    [Parameter]
    public RenderFragment SearchColumnsArea { get; set; }

    [Parameter]
    public EventCallback OnSearchCallback { get; set; }

    private bool IsShowingMoreFilter { get; set; }

    private string FilterIcon => this.IsShowingMoreFilter ? "expand_less" : "expand_more";

    private string FilterDescription => this.IsShowingMoreFilter ? this.Localizer["Search_ShowLessFilterCriteria"] : this.Localizer["Search_ShowMoreFilterCriteria"];



    [Parameter]
    public int? Take { get; set; }

    [Parameter]
    public EventCallback<int?> TakeChanged { get; set; }


    private void OnRowSelect(TSummary summary)
    {
        this.SelectedResults.Add(summary);
        this.summarySubject.OnNext(summary);
    }

    private void OnRowDeselect(TSummary summary)
    {
        this.SelectedResults.Remove(summary);
        this.summarySubject.OnNext(summary);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.selectedResultsObservable = summarySubject
            .Throttle(TimeSpan.FromMilliseconds(200))
            .Subscribe(x =>
                   {
                       foreach (var actionButton in this.ActionButtons)
                       {
                           if (actionButton.CanExecute != null)
                           {
                               actionButton.IsEnabled = actionButton.CanExecute.Invoke();
                           }
                           else
                           {
                               actionButton.IsEnabled = true;
                           }
                       }

                       this.StateHasChanged();
                   });
    }

    public void Dispose()
    {
        this.selectedResultsObservable?.Dispose();
    }
}