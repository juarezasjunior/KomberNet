@inherits BodyBase

@{
    base.BuildRenderTree(__builder);
}

<RadzenCard>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm">
                <RadzenLabel Text="@this.Localizer["Search_InputText"]" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <RadzenTextBox Placeholder="@this.SearchPlaceholder" class="w-100" />
            </div>
            <div class="col-sm">
                <RadzenButton Text="@this.Localizer["Search_Button"]"
                              Click="@ExecuteSearch"
                              ButtonStyle="@Radzen.ButtonStyle.Secondary" />
            </div>
        </div>

        <br />
        <RadzenCard Visible="IsShowingMoreFilter">
            <div class="container-fluid">
                @FilterCriteriaArea
            </div>
        </RadzenCard>

        @if (this.IsShowingMoreFilter)
        {
            <br />
        }

        <div class="row justify-content-center">
            <div class="col-auto">
                <RadzenButton Icon="@FilterIcon"
                              Text="@this.FilterDescription"
                              Size="@Radzen.ButtonSize.Small"
                              Click="() => this.IsShowingMoreFilter = !this.IsShowingMoreFilter"
                              ButtonStyle="@Radzen.ButtonStyle.Secondary" />
            </div>
        </div>
    </div>
</RadzenCard>



<br />

<RadzenCard>
    <div class="container-fluid">
        <div class="row justify-content-end">
            <div class="col-auto">

                @{
                    var allActionButtons = this.ActionButtons.OrderBy(x => x.Sequence).ToList();
                    var firstThreeActionButtons = allActionButtons.Take(3);

                    foreach (var actionButton in firstThreeActionButtons)
                    {
                        <RadzenButton Text="@actionButton.Text"
                              Visible="@actionButton.IsVisible"
                              ButtonStyle="@Radzen.ButtonStyle.Primary"
                              Click="@actionButton.OnExecute" />
                    }

                    var moreActionButtons = allActionButtons.Skip(3);

                    if (moreActionButtons.Any())
                    {
                        <RadzenSplitButton Text="@this.Localizer["Button_MoreOptions"]" ButtonStyle="Radzen.ButtonStyle.Primary">

                            @foreach (var actionButton in moreActionButtons)
                            {
                                <RadzenSplitButtonItem Text="@actionButton.Text"
                                           Visible="@actionButton.IsVisible"
                                           onclick="@actionButton.OnExecute" />
                            }

                        </RadzenSplitButton>
                    }
                }
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <hr />
            </div>
        </div>

        <RadzenDataGrid Data="Customers" TItem="Customer" SelectionMode="Radzen.DataGridSelectionMode.Single" @bind-Value=@SelectedCustomers>
            <Columns>
                <RadzenDataGridColumn TItem="Customer" Property="Id" Title="Id" />
                <RadzenDataGridColumn TItem="Customer" Property="Name" Title="Name" />
            </Columns>
        </RadzenDataGrid>
    </div>
</RadzenCard>

@code {
    [Parameter]
    public string SearchPlaceholder { get; set; } = string.Empty;

    [Parameter]
    public bool ShouldSearchFirstHundredResults { get; set; } = true;

    [Parameter]
    public RenderFragment FilterCriteriaArea { get; set; }

    [Parameter]
    public IList<ActionButton> ActionButtons { get; set; } = new List<ActionButton>();

    private bool IsShowingMoreFilter { get; set; }

    private string FilterIcon => this.IsShowingMoreFilter ? "expand_less" : "expand_more";

    private string FilterDescription => this.IsShowingMoreFilter ? this.Localizer["Search_ShowLessFilterCriteria"] : this.Localizer["Search_ShowMoreFilterCriteria"];





    [Parameter]
    public int? Take { get; set; }

    [Parameter]
    public EventCallback<int?> TakeChanged { get; set; }

    public List<Customer> Customers { get; set; } = new List<Customer>();

    public IList<Customer> SelectedCustomers { get; set; }

    public int ID { get; set; }

    public string Name { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    public class Customer
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }

    private void ExecuteSearch()
    {
        var customers = new List<Customer>();
        customers.Add(new Customer() { Id = 1, Name = "John" });
        customers.Add(new Customer() { Id = 2, Name = "Mary" });
        customers.Add(new Customer() { Id = 3, Name = "Peter" });
        customers.Add(new Customer() { Id = 4, Name = "Joseph" });

        this.Customers = customers.Where(x => (this.ID == default && this.Name == default)
            || x.Id == this.ID
            || x.Name == this.Name).ToList();
    }
}